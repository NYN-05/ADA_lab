#include <stdio.h>
#define MAX 10

void topologicalSort(int a[MAX][MAX], int n) {
    int in[MAX] = {0}, out[MAX], stack[MAX], top = -1, k = 0;
    
    // Calculate in-degree for each vertex
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            in[i] += a[j][i];
    
    // Find vertices with no incoming edges
    while (1) {
        for (int i = 0; i < n; i++) {
            if (in[i] == 0) {
                stack[++top] = i;
                in[i] = -1; // Mark as visited
            }
        }
        if (top == -1) break;
        
        out[k++] = stack[top--];
        for (int i = 0; i < n; i++)
            if (a[out[k-1]][i]) in[i]--;
    }
    
    printf("Topological Order: ");
    for (int i = 0; i < k; i++)
        printf("%d ", out[i] + 1);
}

int main() {
    int a[MAX][MAX], n;
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter adjacency matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &a[i][j]);
    
    topologicalSort(a, n);
    printf("\n");
    return 0;
}
// Output:
// Topological Sorting Algorithm -
// Enter the number of vertices: 5
// Enter the adjacency matrix:
// 0 0 1 0 0
// 0 0 1 0 0
// 0 0 0 1 1
// 0 0 0 0 1
// 0 0 0 0 0
// Topological Sorting as follows:
// -
//     2 1 3 4 5