#include <stdio.h>
#define INF 999

int n, cost[10][10], near[10];

void readGraph() {
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter cost matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0 && i != j) cost[i][j] = INF;
        }
}

void prims() {
    int min = INF, u = 0, v = 0, total = 0;

    for (int i = 0; i < n; i++)  // Find first min edge
        for (int j = 0; j < n; j++)
            if (i != j && cost[i][j] < min) {
                min = cost[i][j]; u = i; v = j;
            }

    for (int i = 0; i < n; i++)
        near[i] = (cost[i][u] < cost[i][v]) ? u : v;
    near[u] = near[v] = -1;

    printf("MST Edges:\n(%d,%d) -> %d\n", u, v, min);
    total += min;

    for (int i = 1; i < n - 1; i++) {
        min = INF;
        for (int j = 0; j < n; j++)
            if (near[j] != -1 && cost[j][near[j]] < min) {
                min = cost[j][near[j]]; u = j;
            }

        printf("(%d,%d) -> %d\n", u, near[u], cost[u][near[u]]);
        total += cost[u][near[u]];
        near[u] = -1;

        for (int j = 0; j < n; j++)
            if (near[j] != -1 && cost[j][u] < cost[j][near[j]])
                near[j] = u;
    }

    printf("Total Cost: %d\n", total);
}

int main() {
    readGraph();
    prims();
    return 0;
}
