#include <stdio.h>
#define INF 9999
#define MAX 10

void dijkstra(int G[MAX][MAX], int n, int start) {
	int dist[MAX], visited[MAX] = {0}, prev[MAX], i, j, count, min, next;

	for (i = 0; i < n; i++) {
		dist[i] = G[start][i] ? G[start][i] : INF;
		prev[i] = start;
	}
	dist[start] = 0;
	visited[start] = 1;

	for (count = 1; count < n - 1; count++) {
		min = INF;
		for (i = 0; i < n; i++)
			if (!visited[i] && dist[i] < min)
				min = dist[i], next = i;

		visited[next] = 1;
		for (i = 0; i < n; i++)
			if (!visited[i] && G[next][i] && dist[next] + G[next][i] < dist[i])
				dist[i] = dist[next] + G[next][i], prev[i] = next;
	}

	for (i = 0; i < n; i++)
		if (i != start)
			printf("Distance to node %d: %d\n", i, dist[i]);
}

int main() {
	int G[MAX][MAX], n, i, j;
	printf("Enter number of nodes: ");
	scanf("%d", &n);
	printf("Enter cost adjacency matrix:\n");
	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++)
			scanf("%d", &G[i][j]);
	dijkstra(G, n, 0);
	return 0;
}

// Output:
// Enter the number of nodes:
// 5
// Enter the cost adjacency Matrix:
// 0 3 0 7 0
// 3 0 4 2 0
// 0 4 0 5 6
// 7 2 5 0 4
// 0 0 6 4 0

// Distance from the Source Node to 1: 3
// Distance from the Source Node to 2: 7
// Distance from the Source Node to 3: 5
// Distance from the Source Node to 4: 9